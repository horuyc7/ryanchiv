{"ast":null,"code":"import React, { useState, useEffect } from 'react';\n/*\nconst clientID = '6198fcf6f4eb4eda9e9bca8527177fd4';\nconst clientSecret = '5f3e5221e42d4ca695c2c1be5910747f';\nlet accessToken = ''; // Store the access token globally\n\nasync function getAccessToken() {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientID}:${clientSecret}`)}`\n    },\n    body: 'grant_type=client_credentials&scope=user-top-read'\n  });\n  const data = await response.json();\n  accessToken = data.access_token; // Update the global access token\n  setTimeout(getAccessToken, 3600000); // Refresh token after one hour (3600000 milliseconds)\n}\n\nasync function fetchWebApi(endpoint, method, body) {\n  //if (!accessToken) await getAccessToken();\n\n  //console.log(accessToken);\n\n  const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n    headers: {\n      Authorization: `Bearer BQCY78x1w61LdiXUa9RnLwGj3KeAFWQXKJEhqbQO0y1aIBb7iDqAoK_gG1uhbaBXJ1yK39XNbvBelEWfZBnXysPkxxHogSyJrUUo3r8EXd3Ys54rZq8b8wAOdgc`,\n    },\n    method,\n    body: JSON.stringify(body)\n  });\n  return await res.json();\n}\n\nasync function getTopTracks() {\n    try {\n      const response = await fetchWebApi(\n        'v1/me/top/tracks?time_range=long_term&limit=5', 'GET'\n      );\n\n      return response.items || []; // Return an empty array if items is undefined\n    } catch (error) {\n      console.error('Error fetching top tracks:', error);\n      return []; // Return an empty array in case of an error\n    }\n  }\n\nexport default function Spotify() {\n  const [tracks, setTracks] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchAndDisplayTopTracks() {\n      const topTracks = await getTopTracks();\n      setTracks(topTracks);\n      setLoading(false);\n    \n    }\n\n    fetchAndDisplayTopTracks();\n  }, []);\n\n  return (\n    <div>\n      <h2>Top 5 Tracks</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"songs-container\">\n          {tracks.map((track, index) => (\n            <li key={index}>{track.name} by {track.artists.map(artist => artist.name).join(', ')}</li>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n\n\nconst clientID = '6198fcf6f4eb4eda9e9bca8527177fd4';\nconst clientSecret = '5f3e5221e42d4ca695c2c1be5910747f';\n\nasync function getAccessToken() {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientID}:${clientSecret}`)}`\n    },\n    body: 'grant_type=client_credentials'\n  });\n  const data = await response.json();\n  return data.access_token;\n}\n\nconst token = 'BQAp4g-uCLadW9kYJ1aYHVcCr9-V1h_JU-HQOObc6IlexMWw0G3ueuhI-kcdWHlxr503sWASA--VU1FwQFBNZrkvsHIwO-0pM8JC1vsWe6B6MKOpyrbx-F3-HohvbDTQYhq0zpz4hM3vdHLhTzQRnxrgF6TsEGaIXUOuQbBQ9riYZka5X2hOl9dLSWagKLkatf3XVx7c-Gl1wyjR9i6efR4J2BkaDPTvE6buUcfOGvT-AaJC2jYeqseu-Pkgndsps28DxV8';\n\nasync function fetchWebApi(endpoint, method, body) {\n    const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n        headers: {\n        Authorization: `Bearer ${token}`,\n        },\n        method,\n        body:JSON.stringify(body)\n    });\n\nreturn await res.json();\n}\n\nasync function getTopTracks(){\n    // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-users-top-artists-and-tracks\n    return (await fetchWebApi(\n      'v1/me/top/tracks?time_range=long_term&limit=5', 'GET'\n    )).items;\n  }\n\n\n  export default function Spotify() {\n    const [tracks, setTracks] = useState([]);\n    const [loading, setLoading] = useState(true);\n  \n    useEffect(() => {\n      async function fetchData() {\n        try {\n\n          const topTracks = await getTopTracks();\n\n          if (!topTracks || topTracks.items.length === 0) {\n            topTracks = [];\n          }\n\n          console.log(topTracks);\n\n          setTracks(topTracks);\n          setLoading(false);\n\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          setLoading(false);\n\n        }\n      }\n  \n      fetchData();\n    }, []);\n  \n    return (\n        <div>\n          <h2>Top 5 Tracks</h2>\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            <div className=\"songs-container\">\n              {tracks.map((track, index) => (\n                <li key={index}>{track.name} by {track.artists.map(artist => artist.name).join(', ')}</li>\n              ))}\n            </div>\n          )}\n        </div>\n      );\n  } */\n\n// Authorization token that must have been created previously. See : https://developer.spotify.com/documentation/web-api/concepts/authorization\nconst token = 'BQAp4g-uCLadW9kYJ1aYHVcCr9-V1h_JU-HQOObc6IlexMWw0G3ueuhI-kcdWHlxr503sWASA--VU1FwQFBNZrkvsHIwO-0pM8JC1vsWe6B6MKOpyrbx-F3-HohvbDTQYhq0zpz4hM3vdHLhTzQRnxrgF6TsEGaIXUOuQbBQ9riYZka5X2hOl9dLSWagKLkatf3XVx7c-Gl1wyjR9i6efR4J2BkaDPTvE6buUcfOGvT-AaJC2jYeqseu-Pkgndsps28DxV8';\nasync function fetchWebApi(endpoint, method, body) {\n  const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    method,\n    body: JSON.stringify(body)\n  });\n  return await res.json();\n}\nasync function getTopTracks() {\n  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-users-top-artists-and-tracks\n  return (await fetchWebApi('v1/me/top/tracks?time_range=long_term&limit=5', 'GET')).items;\n}\n(async () => {\n  const topTracks = await getTopTracks();\n  console.log(topTracks === null || topTracks === void 0 ? void 0 : topTracks.map(({\n    name,\n    artists\n  }) => `${name} by ${artists.map(artist => artist.name).join(', ')}`));\n})();","map":{"version":3,"names":["React","useState","useEffect","token","fetchWebApi","endpoint","method","body","res","fetch","headers","Authorization","JSON","stringify","json","getTopTracks","items","topTracks","console","log","map","name","artists","artist","join"],"sources":["/Users/horuy/Desktop/js/site/src/component/Spotify.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n/*\nconst clientID = '6198fcf6f4eb4eda9e9bca8527177fd4';\nconst clientSecret = '5f3e5221e42d4ca695c2c1be5910747f';\nlet accessToken = ''; // Store the access token globally\n\nasync function getAccessToken() {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientID}:${clientSecret}`)}`\n    },\n    body: 'grant_type=client_credentials&scope=user-top-read'\n  });\n  const data = await response.json();\n  accessToken = data.access_token; // Update the global access token\n  setTimeout(getAccessToken, 3600000); // Refresh token after one hour (3600000 milliseconds)\n}\n\nasync function fetchWebApi(endpoint, method, body) {\n  //if (!accessToken) await getAccessToken();\n\n  //console.log(accessToken);\n\n  const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n    headers: {\n      Authorization: `Bearer BQCY78x1w61LdiXUa9RnLwGj3KeAFWQXKJEhqbQO0y1aIBb7iDqAoK_gG1uhbaBXJ1yK39XNbvBelEWfZBnXysPkxxHogSyJrUUo3r8EXd3Ys54rZq8b8wAOdgc`,\n    },\n    method,\n    body: JSON.stringify(body)\n  });\n  return await res.json();\n}\n\nasync function getTopTracks() {\n    try {\n      const response = await fetchWebApi(\n        'v1/me/top/tracks?time_range=long_term&limit=5', 'GET'\n      );\n\n      return response.items || []; // Return an empty array if items is undefined\n    } catch (error) {\n      console.error('Error fetching top tracks:', error);\n      return []; // Return an empty array in case of an error\n    }\n  }\n\nexport default function Spotify() {\n  const [tracks, setTracks] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchAndDisplayTopTracks() {\n      const topTracks = await getTopTracks();\n      setTracks(topTracks);\n      setLoading(false);\n    \n    }\n\n    fetchAndDisplayTopTracks();\n  }, []);\n\n  return (\n    <div>\n      <h2>Top 5 Tracks</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"songs-container\">\n          {tracks.map((track, index) => (\n            <li key={index}>{track.name} by {track.artists.map(artist => artist.name).join(', ')}</li>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n\n\nconst clientID = '6198fcf6f4eb4eda9e9bca8527177fd4';\nconst clientSecret = '5f3e5221e42d4ca695c2c1be5910747f';\n\nasync function getAccessToken() {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientID}:${clientSecret}`)}`\n    },\n    body: 'grant_type=client_credentials'\n  });\n  const data = await response.json();\n  return data.access_token;\n}\n\nconst token = 'BQAp4g-uCLadW9kYJ1aYHVcCr9-V1h_JU-HQOObc6IlexMWw0G3ueuhI-kcdWHlxr503sWASA--VU1FwQFBNZrkvsHIwO-0pM8JC1vsWe6B6MKOpyrbx-F3-HohvbDTQYhq0zpz4hM3vdHLhTzQRnxrgF6TsEGaIXUOuQbBQ9riYZka5X2hOl9dLSWagKLkatf3XVx7c-Gl1wyjR9i6efR4J2BkaDPTvE6buUcfOGvT-AaJC2jYeqseu-Pkgndsps28DxV8';\n\nasync function fetchWebApi(endpoint, method, body) {\n    const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n        headers: {\n        Authorization: `Bearer ${token}`,\n        },\n        method,\n        body:JSON.stringify(body)\n    });\n\nreturn await res.json();\n}\n\nasync function getTopTracks(){\n    // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-users-top-artists-and-tracks\n    return (await fetchWebApi(\n      'v1/me/top/tracks?time_range=long_term&limit=5', 'GET'\n    )).items;\n  }\n\n\n  export default function Spotify() {\n    const [tracks, setTracks] = useState([]);\n    const [loading, setLoading] = useState(true);\n  \n    useEffect(() => {\n      async function fetchData() {\n        try {\n\n          const topTracks = await getTopTracks();\n\n          if (!topTracks || topTracks.items.length === 0) {\n            topTracks = [];\n          }\n\n          console.log(topTracks);\n\n          setTracks(topTracks);\n          setLoading(false);\n\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          setLoading(false);\n\n        }\n      }\n  \n      fetchData();\n    }, []);\n  \n    return (\n        <div>\n          <h2>Top 5 Tracks</h2>\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            <div className=\"songs-container\">\n              {tracks.map((track, index) => (\n                <li key={index}>{track.name} by {track.artists.map(artist => artist.name).join(', ')}</li>\n              ))}\n            </div>\n          )}\n        </div>\n      );\n  } */\n\n// Authorization token that must have been created previously. See : https://developer.spotify.com/documentation/web-api/concepts/authorization\nconst token = 'BQAp4g-uCLadW9kYJ1aYHVcCr9-V1h_JU-HQOObc6IlexMWw0G3ueuhI-kcdWHlxr503sWASA--VU1FwQFBNZrkvsHIwO-0pM8JC1vsWe6B6MKOpyrbx-F3-HohvbDTQYhq0zpz4hM3vdHLhTzQRnxrgF6TsEGaIXUOuQbBQ9riYZka5X2hOl9dLSWagKLkatf3XVx7c-Gl1wyjR9i6efR4J2BkaDPTvE6buUcfOGvT-AaJC2jYeqseu-Pkgndsps28DxV8';\nasync function fetchWebApi(endpoint, method, body) {\n  const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    method,\n    body:JSON.stringify(body)\n  });\n  return await res.json();\n}\n\nasync function getTopTracks(){\n  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-users-top-artists-and-tracks\n  return (await fetchWebApi(\n    'v1/me/top/tracks?time_range=long_term&limit=5', 'GET'\n  )).items;\n}\n\n(async () => {\n    const topTracks = await getTopTracks();\n    console.log(\n      topTracks?.map(\n        ({ name, artists }) =>\n          `${name} by ${artists.map(artist => artist.name).join(', ')}`\n      )\n    );\n  })();"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClyQAAyQ;AACvR,eAAeC,WAAWA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAE;EACjD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,2BAA0BJ,QAAS,EAAC,EAAE;IAC7DK,OAAO,EAAE;MACPC,aAAa,EAAG,UAASR,KAAM;IACjC,CAAC;IACDG,MAAM;IACNC,IAAI,EAACK,IAAI,CAACC,SAAS,CAACN,IAAI;EAC1B,CAAC,CAAC;EACF,OAAO,MAAMC,GAAG,CAACM,IAAI,CAAC,CAAC;AACzB;AAEA,eAAeC,YAAYA,CAAA,EAAE;EAC3B;EACA,OAAO,CAAC,MAAMX,WAAW,CACvB,+CAA+C,EAAE,KACnD,CAAC,EAAEY,KAAK;AACV;AAEA,CAAC,YAAY;EACT,MAAMC,SAAS,GAAG,MAAMF,YAAY,CAAC,CAAC;EACtCG,OAAO,CAACC,GAAG,CACTF,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEG,GAAG,CACZ,CAAC;IAAEC,IAAI;IAAEC;EAAQ,CAAC,KACf,GAAED,IAAK,OAAMC,OAAO,CAACF,GAAG,CAACG,MAAM,IAAIA,MAAM,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,IAAI,CAAE,EAChE,CACF,CAAC;AACH,CAAC,EAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}