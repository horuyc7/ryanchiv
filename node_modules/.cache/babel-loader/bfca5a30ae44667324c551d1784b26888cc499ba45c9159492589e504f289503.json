{"ast":null,"code":"var _jsxFileName = \"/Users/horuy/Desktop/js/site/src/component/Spotify.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n/*\nconst clientID = '6198fcf6f4eb4eda9e9bca8527177fd4';\nconst clientSecret = '5f3e5221e42d4ca695c2c1be5910747f';\nlet accessToken = ''; // Store the access token globally\n\nasync function getAccessToken() {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientID}:${clientSecret}`)}`\n    },\n    body: 'grant_type=client_credentials&scope=user-top-read'\n  });\n  const data = await response.json();\n  accessToken = data.access_token; // Update the global access token\n  setTimeout(getAccessToken, 3600000); // Refresh token after one hour (3600000 milliseconds)\n}\n\nasync function fetchWebApi(endpoint, method, body) {\n  //if (!accessToken) await getAccessToken();\n\n  //console.log(accessToken);\n\n  const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n    headers: {\n      Authorization: `Bearer BQCY78x1w61LdiXUa9RnLwGj3KeAFWQXKJEhqbQO0y1aIBb7iDqAoK_gG1uhbaBXJ1yK39XNbvBelEWfZBnXysPkxxHogSyJrUUo3r8EXd3Ys54rZq8b8wAOdgc`,\n    },\n    method,\n    body: JSON.stringify(body)\n  });\n  return await res.json();\n}\n\nasync function getTopTracks() {\n    try {\n      const response = await fetchWebApi(\n        'v1/me/top/tracks?time_range=long_term&limit=5', 'GET'\n      );\n\n      return response.items || []; // Return an empty array if items is undefined\n    } catch (error) {\n      console.error('Error fetching top tracks:', error);\n      return []; // Return an empty array in case of an error\n    }\n  }\n\nexport default function Spotify() {\n  const [tracks, setTracks] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchAndDisplayTopTracks() {\n      const topTracks = await getTopTracks();\n      setTracks(topTracks);\n      setLoading(false);\n    \n    }\n\n    fetchAndDisplayTopTracks();\n  }, []);\n\n  return (\n    <div>\n      <h2>Top 5 Tracks</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"songs-container\">\n          {tracks.map((track, index) => (\n            <li key={index}>{track.name} by {track.artists.map(artist => artist.name).join(', ')}</li>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n\n\nconst clientID = '6198fcf6f4eb4eda9e9bca8527177fd4';\nconst clientSecret = '5f3e5221e42d4ca695c2c1be5910747f';\n\nasync function getAccessToken() {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientID}:${clientSecret}`)}`\n    },\n    body: 'grant_type=client_credentials'\n  });\n  const data = await response.json();\n  return data.access_token;\n}\n\nconst token = 'BQAp4g-uCLadW9kYJ1aYHVcCr9-V1h_JU-HQOObc6IlexMWw0G3ueuhI-kcdWHlxr503sWASA--VU1FwQFBNZrkvsHIwO-0pM8JC1vsWe6B6MKOpyrbx-F3-HohvbDTQYhq0zpz4hM3vdHLhTzQRnxrgF6TsEGaIXUOuQbBQ9riYZka5X2hOl9dLSWagKLkatf3XVx7c-Gl1wyjR9i6efR4J2BkaDPTvE6buUcfOGvT-AaJC2jYeqseu-Pkgndsps28DxV8';\n\nasync function fetchWebApi(endpoint, method, body) {\n    const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n        headers: {\n        Authorization: `Bearer ${token}`,\n        },\n        method,\n        body:JSON.stringify(body)\n    });\n\nreturn await res.json();\n}\n\nasync function getTopTracks(){\n    // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-users-top-artists-and-tracks\n    return (await fetchWebApi(\n      'v1/me/top/tracks?time_range=long_term&limit=5', 'GET'\n    )).items;\n  }\n\n\n  export default function Spotify() {\n    const [tracks, setTracks] = useState([]);\n    const [loading, setLoading] = useState(true);\n  \n    useEffect(() => {\n      async function fetchData() {\n        try {\n\n          const topTracks = await getTopTracks();\n\n          if (!topTracks || topTracks.items.length === 0) {\n            topTracks = [];\n          }\n\n          console.log(topTracks);\n\n          setTracks(topTracks);\n          setLoading(false);\n\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          setLoading(false);\n\n        }\n      }\n  \n      fetchData();\n    }, []);\n  \n    return (\n        <div>\n          <h2>Top 5 Tracks</h2>\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            <div className=\"songs-container\">\n              {tracks.map((track, index) => (\n                <li key={index}>{track.name} by {track.artists.map(artist => artist.name).join(', ')}</li>\n              ))}\n            </div>\n          )}\n        </div>\n      );\n  } */\n\n// Authorization token that must have been created previously. See : https://developer.spotify.com/documentation/web-api/concepts/authorization\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst token = 'BQAp4g-uCLadW9kYJ1aYHVcCr9-V1h_JU-HQOObc6IlexMWw0G3ueuhI-kcdWHlxr503sWASA--VU1FwQFBNZrkvsHIwO-0pM8JC1vsWe6B6MKOpyrbx-F3-HohvbDTQYhq0zpz4hM3vdHLhTzQRnxrgF6TsEGaIXUOuQbBQ9riYZka5X2hOl9dLSWagKLkatf3XVx7c-Gl1wyjR9i6efR4J2BkaDPTvE6buUcfOGvT-AaJC2jYeqseu-Pkgndsps28DxV8';\nasync function fetchWebApi(endpoint, method, body) {\n  const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    method,\n    body: JSON.stringify(body)\n  });\n  return await res.json();\n}\nasync function getTopTracks() {\n  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-users-top-artists-and-tracks\n  return (await fetchWebApi('v1/me/top/tracks?time_range=short_term&limit=10', 'GET')).items;\n}\nexport default function Spotify() {\n  _s();\n  const [topTracks, setTopTracks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchAndSetTopTracks() {\n      try {\n        const tracks = await getTopTracks();\n        setTopTracks(tracks);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching top tracks:', error);\n        setLoading(false);\n      }\n    }\n    fetchAndSetTopTracks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top 5 Tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: topTracks.map((track, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            marginRight: '20px',\n            width: '90px',\n            height: '50px'\n          },\n          src: track.album.images[2].url,\n          alt: track.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [track.name, \"  by \", track.artists.map(artist => artist.name).join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 7\n  }, this);\n}\n_s(Spotify, \"RW0yzeSgNVH7IM3WLw9RIIUSVtc=\");\n_c = Spotify;\nvar _c;\n$RefreshReg$(_c, \"Spotify\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","token","fetchWebApi","endpoint","method","body","res","fetch","headers","Authorization","JSON","stringify","json","getTopTracks","items","Spotify","_s","topTracks","setTopTracks","loading","setLoading","fetchAndSetTopTracks","tracks","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","track","index","style","marginRight","width","height","src","album","images","url","alt","name","artists","artist","join","_c","$RefreshReg$"],"sources":["/Users/horuy/Desktop/js/site/src/component/Spotify.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n/*\nconst clientID = '6198fcf6f4eb4eda9e9bca8527177fd4';\nconst clientSecret = '5f3e5221e42d4ca695c2c1be5910747f';\nlet accessToken = ''; // Store the access token globally\n\nasync function getAccessToken() {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientID}:${clientSecret}`)}`\n    },\n    body: 'grant_type=client_credentials&scope=user-top-read'\n  });\n  const data = await response.json();\n  accessToken = data.access_token; // Update the global access token\n  setTimeout(getAccessToken, 3600000); // Refresh token after one hour (3600000 milliseconds)\n}\n\nasync function fetchWebApi(endpoint, method, body) {\n  //if (!accessToken) await getAccessToken();\n\n  //console.log(accessToken);\n\n  const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n    headers: {\n      Authorization: `Bearer BQCY78x1w61LdiXUa9RnLwGj3KeAFWQXKJEhqbQO0y1aIBb7iDqAoK_gG1uhbaBXJ1yK39XNbvBelEWfZBnXysPkxxHogSyJrUUo3r8EXd3Ys54rZq8b8wAOdgc`,\n    },\n    method,\n    body: JSON.stringify(body)\n  });\n  return await res.json();\n}\n\nasync function getTopTracks() {\n    try {\n      const response = await fetchWebApi(\n        'v1/me/top/tracks?time_range=long_term&limit=5', 'GET'\n      );\n\n      return response.items || []; // Return an empty array if items is undefined\n    } catch (error) {\n      console.error('Error fetching top tracks:', error);\n      return []; // Return an empty array in case of an error\n    }\n  }\n\nexport default function Spotify() {\n  const [tracks, setTracks] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchAndDisplayTopTracks() {\n      const topTracks = await getTopTracks();\n      setTracks(topTracks);\n      setLoading(false);\n    \n    }\n\n    fetchAndDisplayTopTracks();\n  }, []);\n\n  return (\n    <div>\n      <h2>Top 5 Tracks</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"songs-container\">\n          {tracks.map((track, index) => (\n            <li key={index}>{track.name} by {track.artists.map(artist => artist.name).join(', ')}</li>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n\n\nconst clientID = '6198fcf6f4eb4eda9e9bca8527177fd4';\nconst clientSecret = '5f3e5221e42d4ca695c2c1be5910747f';\n\nasync function getAccessToken() {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${clientID}:${clientSecret}`)}`\n    },\n    body: 'grant_type=client_credentials'\n  });\n  const data = await response.json();\n  return data.access_token;\n}\n\nconst token = 'BQAp4g-uCLadW9kYJ1aYHVcCr9-V1h_JU-HQOObc6IlexMWw0G3ueuhI-kcdWHlxr503sWASA--VU1FwQFBNZrkvsHIwO-0pM8JC1vsWe6B6MKOpyrbx-F3-HohvbDTQYhq0zpz4hM3vdHLhTzQRnxrgF6TsEGaIXUOuQbBQ9riYZka5X2hOl9dLSWagKLkatf3XVx7c-Gl1wyjR9i6efR4J2BkaDPTvE6buUcfOGvT-AaJC2jYeqseu-Pkgndsps28DxV8';\n\nasync function fetchWebApi(endpoint, method, body) {\n    const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n        headers: {\n        Authorization: `Bearer ${token}`,\n        },\n        method,\n        body:JSON.stringify(body)\n    });\n\nreturn await res.json();\n}\n\nasync function getTopTracks(){\n    // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-users-top-artists-and-tracks\n    return (await fetchWebApi(\n      'v1/me/top/tracks?time_range=long_term&limit=5', 'GET'\n    )).items;\n  }\n\n\n  export default function Spotify() {\n    const [tracks, setTracks] = useState([]);\n    const [loading, setLoading] = useState(true);\n  \n    useEffect(() => {\n      async function fetchData() {\n        try {\n\n          const topTracks = await getTopTracks();\n\n          if (!topTracks || topTracks.items.length === 0) {\n            topTracks = [];\n          }\n\n          console.log(topTracks);\n\n          setTracks(topTracks);\n          setLoading(false);\n\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          setLoading(false);\n\n        }\n      }\n  \n      fetchData();\n    }, []);\n  \n    return (\n        <div>\n          <h2>Top 5 Tracks</h2>\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            <div className=\"songs-container\">\n              {tracks.map((track, index) => (\n                <li key={index}>{track.name} by {track.artists.map(artist => artist.name).join(', ')}</li>\n              ))}\n            </div>\n          )}\n        </div>\n      );\n  } */\n\n// Authorization token that must have been created previously. See : https://developer.spotify.com/documentation/web-api/concepts/authorization\n\nconst token = 'BQAp4g-uCLadW9kYJ1aYHVcCr9-V1h_JU-HQOObc6IlexMWw0G3ueuhI-kcdWHlxr503sWASA--VU1FwQFBNZrkvsHIwO-0pM8JC1vsWe6B6MKOpyrbx-F3-HohvbDTQYhq0zpz4hM3vdHLhTzQRnxrgF6TsEGaIXUOuQbBQ9riYZka5X2hOl9dLSWagKLkatf3XVx7c-Gl1wyjR9i6efR4J2BkaDPTvE6buUcfOGvT-AaJC2jYeqseu-Pkgndsps28DxV8';\n\nasync function fetchWebApi(endpoint, method, body) {\n  const res = await fetch(`https://api.spotify.com/${endpoint}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    method,\n    body: JSON.stringify(body)\n  });\n  return await res.json();\n}\n\nasync function getTopTracks() {\n  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-users-top-artists-and-tracks\n  return (await fetchWebApi(\n    'v1/me/top/tracks?time_range=short_term&limit=10', 'GET'\n  )).items;\n}\n\nexport default function Spotify() {\n    const [topTracks, setTopTracks] = useState([]);\n    const [loading, setLoading] = useState(true);\n  \n    useEffect(() => {\n      async function fetchAndSetTopTracks() {\n        try {\n          const tracks = await getTopTracks();\n          setTopTracks(tracks);\n          setLoading(false);\n        } catch (error) {\n          console.error('Error fetching top tracks:', error);\n          setLoading(false);\n        }\n      }\n  \n      fetchAndSetTopTracks();\n    }, []);\n  \n    return (\n      <div>\n        <h2>Top 5 Tracks</h2>\n        {loading ? (\n          <p>Loading...</p>\n        ) : (\n          <div>\n            {topTracks.map((track, index) => (\n              <div key={index}>\n                <img style={{ marginRight: '20px', width: '90px', height: '50px'}} src={track.album.images[2].url}  alt={track.name} />\n                <p>{track.name}  by {track.artists.map(artist => artist.name).join(', ')}</p>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}